
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEleftLPARENRPARENleftMODEXPleftLCORCRCORCAND COMA COMMENT DEF DIVIDE DPUNTOS ELIF ELSE EQUALS EXP FALSE FOR ID IF IN LCORC LPAREN MAYOR MENOR MINUS MOD NAME NEGADOR NUMBER OR PLUS PUNTO RANGE RCORC RETURN RPAREN STRING TIMES TRUEexpr_funcion : NAME LPAREN params RPAREN\n                    | NAME LPAREN RPARENparams : variable\n\t\t\t  | params COMA variable\n\t\t\t  | expr_funcionvariable : NAME\n\t\t\t\t| expr_str\n\t\t\t\t| NUMBER\n\t\t\t\t| expr_float\n\t\t\t\t| bool\n\t\t\t\t| listalista : NAME LCORC variable RCORC\n             | NAME LCORC RCORC\n             | NAME LCORC operaciones_algebraica RCORCexpr_str : STRINGexpr_float : NUMBER PUNTO NUMBERexpr_def_funcion : DEF expr_funcion DPUNTOSlinea_codigo : expr_funcion\n\t\t\t\t\t| expr_asign\n\t\t\t\t\t| expr_if_else\n\t\t\t\t\t| def_for\n\t\t\t\t\t| expr_return\n\t\t\t\t\t| expr_def_funcion\n\t\t\t\t\t| COMMENTexpr_asign : NAME EQUALS variable\n                  | NAME EQUALS operaciones_algebraicaoperador_igualdad : MAYOR\n                         | MENOR\n                         | EQUALS EQUALS\n                         | MAYOR EQUALS\n                         | MENOR EQUALS\n                         | NEGADOR EQUALSexpr_return : RETURN variable\n                   | RETURN expr_funcion\n                   | RETURN operaciones_algebraica expr_if_else : IF condiciones_para_expr_if_else DPUNTOS\n                       | ELIF condiciones_para_expr_if_else DPUNTOS\n                       | ELSE DPUNTOScondiciones : variable\n                    | expr_funcion operador_igualdad variable\n                    | expr_funcion\n                    | expr_funcion operador_igualdad expr_funcion\n                    | variable operador_igualdad expr_funcion\n                    | operaciones_algebraica operador_igualdad expr_funcion\n                    | operaciones_algebraica operador_igualdad variable\n                    | variable operador_igualdad operaciones_algebraica\n                    | expr_funcion operador_igualdad operaciones_algebraicacondiciones_para_expr_if_else : condiciones\n                                   | condiciones_para_expr_if_else and_or condicionesdef_for : FOR variable IN RANGE LPAREN params_for RPAREN DPUNTOSparams_for :\tvariable\n                  | variable COMA variable\n                  | variable  COMA variable COMA variablebool : TRUE\n\t        | FALSE and_or : AND\n               | ORoperaciones_algebraica : variable operador_alge variable\n                              | LPAREN variable operador_alge variable RPAREN\n                              |  operaciones_algebraica operador_alge variable\n                              | variable operador_alge operaciones_algebraicaoperador_alge : PLUS\n\t                 | MINUS\n\t                 | TIMES\n\t                 | DIVIDE\n\t                 | EXP\n\t                 | MODempty :'
    
_lr_action_items = {'NAME':([0,3,17,19,25,29,30,31,32,33,34,35,37,42,],[2,4,21,21,21,21,-62,-63,-64,-65,-66,-67,21,21,]),'$end':([1,6,18,],[0,-2,-1,]),'LPAREN':([2,4,17,29,30,31,32,33,34,35,],[3,3,25,25,-62,-63,-64,-65,-66,-67,]),'RPAREN':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,21,23,26,27,28,36,43,],[6,-6,18,-2,-3,-5,-7,-8,-9,-10,-11,-15,-54,-55,-1,-6,-13,-4,-16,-12,-14,44,]),'NUMBER':([3,17,19,20,25,29,30,31,32,33,34,35,37,42,],[10,10,10,27,10,10,-62,-63,-64,-65,-66,-67,10,10,]),'STRING':([3,17,19,25,29,30,31,32,33,34,35,37,42,],[14,14,14,14,14,-62,-63,-64,-65,-66,-67,14,14,]),'TRUE':([3,17,19,25,29,30,31,32,33,34,35,37,42,],[15,15,15,15,15,-62,-63,-64,-65,-66,-67,15,15,]),'FALSE':([3,17,19,25,29,30,31,32,33,34,35,37,42,],[16,16,16,16,16,-62,-63,-64,-65,-66,-67,16,16,]),'COMA':([4,5,6,7,8,9,10,11,12,13,14,15,16,18,21,23,26,27,28,36,],[-6,19,-2,-3,-5,-7,-8,-9,-10,-11,-15,-54,-55,-1,-6,-13,-4,-16,-12,-14,]),'LCORC':([4,21,],[17,17,]),'RCORC':([9,10,11,12,13,14,15,16,17,21,22,23,24,27,28,36,39,40,41,44,],[-7,-8,-9,-10,-11,-15,-54,-55,23,-6,28,-13,36,-16,-12,-14,-58,-61,-60,-59,]),'PLUS':([9,10,11,12,13,14,15,16,21,22,23,24,27,28,36,38,39,40,41,44,],[-7,-8,-9,-10,-11,-15,-54,-55,-6,30,-13,30,-16,-12,-14,30,30,30,-60,-59,]),'MINUS':([9,10,11,12,13,14,15,16,21,22,23,24,27,28,36,38,39,40,41,44,],[-7,-8,-9,-10,-11,-15,-54,-55,-6,31,-13,31,-16,-12,-14,31,31,31,-60,-59,]),'TIMES':([9,10,11,12,13,14,15,16,21,22,23,24,27,28,36,38,39,40,41,44,],[-7,-8,-9,-10,-11,-15,-54,-55,-6,32,-13,32,-16,-12,-14,32,32,32,-60,-59,]),'DIVIDE':([9,10,11,12,13,14,15,16,21,22,23,24,27,28,36,38,39,40,41,44,],[-7,-8,-9,-10,-11,-15,-54,-55,-6,33,-13,33,-16,-12,-14,33,33,33,-60,-59,]),'EXP':([9,10,11,12,13,14,15,16,21,22,23,24,27,28,36,38,39,40,41,44,],[-7,-8,-9,-10,-11,-15,-54,-55,-6,34,-13,34,-16,-12,-14,34,34,34,-60,-59,]),'MOD':([9,10,11,12,13,14,15,16,21,22,23,24,27,28,36,38,39,40,41,44,],[-7,-8,-9,-10,-11,-15,-54,-55,-6,35,-13,35,-16,-12,-14,35,35,35,-60,-59,]),'PUNTO':([10,],[20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expr_funcion':([0,3,],[1,8,]),'params':([3,],[5,]),'variable':([3,17,19,25,29,37,42,],[7,22,26,38,39,41,43,]),'expr_str':([3,17,19,25,29,37,42,],[9,9,9,9,9,9,9,]),'expr_float':([3,17,19,25,29,37,42,],[11,11,11,11,11,11,11,]),'bool':([3,17,19,25,29,37,42,],[12,12,12,12,12,12,12,]),'lista':([3,17,19,25,29,37,42,],[13,13,13,13,13,13,13,]),'operaciones_algebraica':([17,29,],[24,40,]),'operador_alge':([22,24,38,39,40,],[29,37,42,29,37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expr_funcion","S'",1,None,None,None),
  ('expr_funcion -> NAME LPAREN params RPAREN','expr_funcion',4,'p_expr_funcion','PythonPlag.py',123),
  ('expr_funcion -> NAME LPAREN RPAREN','expr_funcion',3,'p_expr_funcion','PythonPlag.py',124),
  ('params -> variable','params',1,'p_params','PythonPlag.py',129),
  ('params -> params COMA variable','params',3,'p_params','PythonPlag.py',130),
  ('params -> expr_funcion','params',1,'p_params','PythonPlag.py',131),
  ('variable -> NAME','variable',1,'p_variable','PythonPlag.py',135),
  ('variable -> expr_str','variable',1,'p_variable','PythonPlag.py',136),
  ('variable -> NUMBER','variable',1,'p_variable','PythonPlag.py',137),
  ('variable -> expr_float','variable',1,'p_variable','PythonPlag.py',138),
  ('variable -> bool','variable',1,'p_variable','PythonPlag.py',139),
  ('variable -> lista','variable',1,'p_variable','PythonPlag.py',140),
  ('lista -> NAME LCORC variable RCORC','lista',4,'p_lista','PythonPlag.py',144),
  ('lista -> NAME LCORC RCORC','lista',3,'p_lista','PythonPlag.py',145),
  ('lista -> NAME LCORC operaciones_algebraica RCORC','lista',4,'p_lista','PythonPlag.py',146),
  ('expr_str -> STRING','expr_str',1,'p_expr_str','PythonPlag.py',150),
  ('expr_float -> NUMBER PUNTO NUMBER','expr_float',3,'p_expr_float','PythonPlag.py',154),
  ('expr_def_funcion -> DEF expr_funcion DPUNTOS','expr_def_funcion',3,'p_expr_def_funcion','PythonPlag.py',158),
  ('linea_codigo -> expr_funcion','linea_codigo',1,'p_linea_codigo','PythonPlag.py',163),
  ('linea_codigo -> expr_asign','linea_codigo',1,'p_linea_codigo','PythonPlag.py',164),
  ('linea_codigo -> expr_if_else','linea_codigo',1,'p_linea_codigo','PythonPlag.py',165),
  ('linea_codigo -> def_for','linea_codigo',1,'p_linea_codigo','PythonPlag.py',166),
  ('linea_codigo -> expr_return','linea_codigo',1,'p_linea_codigo','PythonPlag.py',167),
  ('linea_codigo -> expr_def_funcion','linea_codigo',1,'p_linea_codigo','PythonPlag.py',168),
  ('linea_codigo -> COMMENT','linea_codigo',1,'p_linea_codigo','PythonPlag.py',169),
  ('expr_asign -> NAME EQUALS variable','expr_asign',3,'p_expr_asign','PythonPlag.py',173),
  ('expr_asign -> NAME EQUALS operaciones_algebraica','expr_asign',3,'p_expr_asign','PythonPlag.py',174),
  ('operador_igualdad -> MAYOR','operador_igualdad',1,'p_operador_igualdad','PythonPlag.py',178),
  ('operador_igualdad -> MENOR','operador_igualdad',1,'p_operador_igualdad','PythonPlag.py',179),
  ('operador_igualdad -> EQUALS EQUALS','operador_igualdad',2,'p_operador_igualdad','PythonPlag.py',180),
  ('operador_igualdad -> MAYOR EQUALS','operador_igualdad',2,'p_operador_igualdad','PythonPlag.py',181),
  ('operador_igualdad -> MENOR EQUALS','operador_igualdad',2,'p_operador_igualdad','PythonPlag.py',182),
  ('operador_igualdad -> NEGADOR EQUALS','operador_igualdad',2,'p_operador_igualdad','PythonPlag.py',183),
  ('expr_return -> RETURN variable','expr_return',2,'p_expr_return','PythonPlag.py',187),
  ('expr_return -> RETURN expr_funcion','expr_return',2,'p_expr_return','PythonPlag.py',188),
  ('expr_return -> RETURN operaciones_algebraica','expr_return',2,'p_expr_return','PythonPlag.py',189),
  ('expr_if_else -> IF condiciones_para_expr_if_else DPUNTOS','expr_if_else',3,'p_expr_if_else','PythonPlag.py',193),
  ('expr_if_else -> ELIF condiciones_para_expr_if_else DPUNTOS','expr_if_else',3,'p_expr_if_else','PythonPlag.py',194),
  ('expr_if_else -> ELSE DPUNTOS','expr_if_else',2,'p_expr_if_else','PythonPlag.py',195),
  ('condiciones -> variable','condiciones',1,'p_condiciones','PythonPlag.py',199),
  ('condiciones -> expr_funcion operador_igualdad variable','condiciones',3,'p_condiciones','PythonPlag.py',200),
  ('condiciones -> expr_funcion','condiciones',1,'p_condiciones','PythonPlag.py',201),
  ('condiciones -> expr_funcion operador_igualdad expr_funcion','condiciones',3,'p_condiciones','PythonPlag.py',202),
  ('condiciones -> variable operador_igualdad expr_funcion','condiciones',3,'p_condiciones','PythonPlag.py',203),
  ('condiciones -> operaciones_algebraica operador_igualdad expr_funcion','condiciones',3,'p_condiciones','PythonPlag.py',204),
  ('condiciones -> operaciones_algebraica operador_igualdad variable','condiciones',3,'p_condiciones','PythonPlag.py',205),
  ('condiciones -> variable operador_igualdad operaciones_algebraica','condiciones',3,'p_condiciones','PythonPlag.py',206),
  ('condiciones -> expr_funcion operador_igualdad operaciones_algebraica','condiciones',3,'p_condiciones','PythonPlag.py',207),
  ('condiciones_para_expr_if_else -> condiciones','condiciones_para_expr_if_else',1,'p_codiciones_para_expr_if_else','PythonPlag.py',211),
  ('condiciones_para_expr_if_else -> condiciones_para_expr_if_else and_or condiciones','condiciones_para_expr_if_else',3,'p_codiciones_para_expr_if_else','PythonPlag.py',212),
  ('def_for -> FOR variable IN RANGE LPAREN params_for RPAREN DPUNTOS','def_for',8,'p_def_for','PythonPlag.py',216),
  ('params_for -> variable','params_for',1,'p_params_for','PythonPlag.py',220),
  ('params_for -> variable COMA variable','params_for',3,'p_params_for','PythonPlag.py',221),
  ('params_for -> variable COMA variable COMA variable','params_for',5,'p_params_for','PythonPlag.py',222),
  ('bool -> TRUE','bool',1,'p_bool','PythonPlag.py',226),
  ('bool -> FALSE','bool',1,'p_bool','PythonPlag.py',227),
  ('and_or -> AND','and_or',1,'p_and_or','PythonPlag.py',231),
  ('and_or -> OR','and_or',1,'p_and_or','PythonPlag.py',232),
  ('operaciones_algebraica -> variable operador_alge variable','operaciones_algebraica',3,'p_operaciones_algebraica','PythonPlag.py',236),
  ('operaciones_algebraica -> LPAREN variable operador_alge variable RPAREN','operaciones_algebraica',5,'p_operaciones_algebraica','PythonPlag.py',237),
  ('operaciones_algebraica -> operaciones_algebraica operador_alge variable','operaciones_algebraica',3,'p_operaciones_algebraica','PythonPlag.py',238),
  ('operaciones_algebraica -> variable operador_alge operaciones_algebraica','operaciones_algebraica',3,'p_operaciones_algebraica','PythonPlag.py',239),
  ('operador_alge -> PLUS','operador_alge',1,'p_operador_alge','PythonPlag.py',243),
  ('operador_alge -> MINUS','operador_alge',1,'p_operador_alge','PythonPlag.py',244),
  ('operador_alge -> TIMES','operador_alge',1,'p_operador_alge','PythonPlag.py',245),
  ('operador_alge -> DIVIDE','operador_alge',1,'p_operador_alge','PythonPlag.py',246),
  ('operador_alge -> EXP','operador_alge',1,'p_operador_alge','PythonPlag.py',247),
  ('operador_alge -> MOD','operador_alge',1,'p_operador_alge','PythonPlag.py',248),
  ('empty -> <empty>','empty',0,'p_empty','PythonPlag.py',250),
]
