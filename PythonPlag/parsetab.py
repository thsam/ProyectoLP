
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND COMA COMDOBLE COMMENT COMSIMPLE DEF DIVIDE DPUNTOS ELIF ELSE EQUALS EXP FALSE FOR IF IN LCORC LLLAVE LPAREN MAYOR MENOR MINUS NAME NEGADOR NUMBER OR PLUS PUNTO RANGE RCORC RETURN RLLAVE RPAREN TIMES TRUEexpr_funcion : NAME LPAREN params RPAREN\n                    | NAME LPAREN RPARENparams : variable\n\t\t\t  | params COMA variable\n\t\t\t  | expr_funcionvariable : NAME\n\t\t\t\t| expr_str\n\t\t\t\t| NUMBER\n\t\t\t\t| expr_float\n\t\t\t\t| bool\n\t\t\t\t| listalista : NAME LCORC variable RCORCexpr_str : COMSIMPLE NAME COMSIMPLE\n\t\t\t\t| COMDOBLE NAME COMDOBLEexpr_float : NUMBER PUNTO NUMBERexpr_def_funcion : DEF expr_funcion DPUNTOSlinea_codigo : expr_funcion\n\t\t\t\t\t| expr_asign\n\t\t\t\t\t| expr_if_else\n\t\t\t\t\t| params_for\n\t\t\t\t\t| expr_return codigo_interno : linea_codigo\n                      | codigo_interno linea_codigoexpr_asign : NAME EQUALS variableoperador_igualdad : MAYOR\n                         | MENOR\n                         | EQUALS EQUALS\n                         | MAYOR EQUALS\n                         | MENOR EQUALS\n                         | NEGADOR EQUALSexpr_return : RETURN variable\n                   | RETURN expr_funcion expr_if_else : IF condiciones DPUNTOS\n                       | ELIF condiciones DPUNTOS\n                       | ELSE DPUNTOScondiciones : variable\n                    | expr_funcion operador_igualdad variable\n                    | expr_funcion\n                    | expr_funcion operador_igualdad expr_funcion\n                    | variable operador_igualdad expr_funcion condiciones_para_expr_if_else : condiciones\n                                   | condiciones_para_expr_if_else and_or condicionesdef_for : FOR variable IN RANGE LPAREN params_for RPAREN DPUNTOSparams_for :\tvariable\n                  | variable COMA variable\n                  | variable  COMA variable COMA variablebool : TRUE\n\t        | FALSE and_or : AND\n               | OR'
    
_lr_action_items = {'NAME':([0,3,14,15,18,20,],[2,4,22,23,24,24,]),'$end':([1,6,19,],[0,-2,-1,]),'LPAREN':([2,4,],[3,3,]),'RPAREN':([3,4,5,6,7,8,9,10,11,12,13,16,17,19,24,26,27,28,29,30,],[6,-6,19,-2,-3,-5,-7,-8,-9,-10,-11,-47,-48,-1,-6,-4,-15,-13,-14,-12,]),'NUMBER':([3,18,20,21,],[10,10,10,27,]),'COMSIMPLE':([3,18,20,22,],[14,14,14,28,]),'COMDOBLE':([3,18,20,23,],[15,15,15,29,]),'TRUE':([3,18,20,],[16,16,16,]),'FALSE':([3,18,20,],[17,17,17,]),'COMA':([4,5,6,7,8,9,10,11,12,13,16,17,19,24,26,27,28,29,30,],[-6,20,-2,-3,-5,-7,-8,-9,-10,-11,-47,-48,-1,-6,-4,-15,-13,-14,-12,]),'LCORC':([4,24,],[18,18,]),'RCORC':([9,10,11,12,13,16,17,24,25,27,28,29,30,],[-7,-8,-9,-10,-11,-47,-48,-6,30,-15,-13,-14,-12,]),'PUNTO':([10,],[21,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expr_funcion':([0,3,],[1,8,]),'params':([3,],[5,]),'variable':([3,18,20,],[7,25,26,]),'expr_str':([3,18,20,],[9,9,9,]),'expr_float':([3,18,20,],[11,11,11,]),'bool':([3,18,20,],[12,12,12,]),'lista':([3,18,20,],[13,13,13,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expr_funcion","S'",1,None,None,None),
  ('expr_funcion -> NAME LPAREN params RPAREN','expr_funcion',4,'p_expr_funcion','PythonPlag.py',95),
  ('expr_funcion -> NAME LPAREN RPAREN','expr_funcion',3,'p_expr_funcion','PythonPlag.py',96),
  ('params -> variable','params',1,'p_params','PythonPlag.py',100),
  ('params -> params COMA variable','params',3,'p_params','PythonPlag.py',101),
  ('params -> expr_funcion','params',1,'p_params','PythonPlag.py',102),
  ('variable -> NAME','variable',1,'p_variable','PythonPlag.py',106),
  ('variable -> expr_str','variable',1,'p_variable','PythonPlag.py',107),
  ('variable -> NUMBER','variable',1,'p_variable','PythonPlag.py',108),
  ('variable -> expr_float','variable',1,'p_variable','PythonPlag.py',109),
  ('variable -> bool','variable',1,'p_variable','PythonPlag.py',110),
  ('variable -> lista','variable',1,'p_variable','PythonPlag.py',111),
  ('lista -> NAME LCORC variable RCORC','lista',4,'p_lista','PythonPlag.py',115),
  ('expr_str -> COMSIMPLE NAME COMSIMPLE','expr_str',3,'p_expr_str','PythonPlag.py',119),
  ('expr_str -> COMDOBLE NAME COMDOBLE','expr_str',3,'p_expr_str','PythonPlag.py',120),
  ('expr_float -> NUMBER PUNTO NUMBER','expr_float',3,'p_expr_float','PythonPlag.py',124),
  ('expr_def_funcion -> DEF expr_funcion DPUNTOS','expr_def_funcion',3,'p_expr_def_funcion','PythonPlag.py',128),
  ('linea_codigo -> expr_funcion','linea_codigo',1,'p_linea_codigo','PythonPlag.py',132),
  ('linea_codigo -> expr_asign','linea_codigo',1,'p_linea_codigo','PythonPlag.py',133),
  ('linea_codigo -> expr_if_else','linea_codigo',1,'p_linea_codigo','PythonPlag.py',134),
  ('linea_codigo -> params_for','linea_codigo',1,'p_linea_codigo','PythonPlag.py',135),
  ('linea_codigo -> expr_return','linea_codigo',1,'p_linea_codigo','PythonPlag.py',136),
  ('codigo_interno -> linea_codigo','codigo_interno',1,'p_codigo_interno','PythonPlag.py',140),
  ('codigo_interno -> codigo_interno linea_codigo','codigo_interno',2,'p_codigo_interno','PythonPlag.py',141),
  ('expr_asign -> NAME EQUALS variable','expr_asign',3,'p_expr_asign','PythonPlag.py',144),
  ('operador_igualdad -> MAYOR','operador_igualdad',1,'p_operador_igualdad','PythonPlag.py',148),
  ('operador_igualdad -> MENOR','operador_igualdad',1,'p_operador_igualdad','PythonPlag.py',149),
  ('operador_igualdad -> EQUALS EQUALS','operador_igualdad',2,'p_operador_igualdad','PythonPlag.py',150),
  ('operador_igualdad -> MAYOR EQUALS','operador_igualdad',2,'p_operador_igualdad','PythonPlag.py',151),
  ('operador_igualdad -> MENOR EQUALS','operador_igualdad',2,'p_operador_igualdad','PythonPlag.py',152),
  ('operador_igualdad -> NEGADOR EQUALS','operador_igualdad',2,'p_operador_igualdad','PythonPlag.py',153),
  ('expr_return -> RETURN variable','expr_return',2,'p_expr_return','PythonPlag.py',157),
  ('expr_return -> RETURN expr_funcion','expr_return',2,'p_expr_return','PythonPlag.py',158),
  ('expr_if_else -> IF condiciones DPUNTOS','expr_if_else',3,'p_expr_if_else','PythonPlag.py',162),
  ('expr_if_else -> ELIF condiciones DPUNTOS','expr_if_else',3,'p_expr_if_else','PythonPlag.py',163),
  ('expr_if_else -> ELSE DPUNTOS','expr_if_else',2,'p_expr_if_else','PythonPlag.py',164),
  ('condiciones -> variable','condiciones',1,'p_condiciones','PythonPlag.py',168),
  ('condiciones -> expr_funcion operador_igualdad variable','condiciones',3,'p_condiciones','PythonPlag.py',169),
  ('condiciones -> expr_funcion','condiciones',1,'p_condiciones','PythonPlag.py',170),
  ('condiciones -> expr_funcion operador_igualdad expr_funcion','condiciones',3,'p_condiciones','PythonPlag.py',171),
  ('condiciones -> variable operador_igualdad expr_funcion','condiciones',3,'p_condiciones','PythonPlag.py',172),
  ('condiciones_para_expr_if_else -> condiciones','condiciones_para_expr_if_else',1,'p_codiciones_para_expr_if_else','PythonPlag.py',176),
  ('condiciones_para_expr_if_else -> condiciones_para_expr_if_else and_or condiciones','condiciones_para_expr_if_else',3,'p_codiciones_para_expr_if_else','PythonPlag.py',177),
  ('def_for -> FOR variable IN RANGE LPAREN params_for RPAREN DPUNTOS','def_for',8,'p_def_for','PythonPlag.py',181),
  ('params_for -> variable','params_for',1,'p_params_for','PythonPlag.py',185),
  ('params_for -> variable COMA variable','params_for',3,'p_params_for','PythonPlag.py',186),
  ('params_for -> variable COMA variable COMA variable','params_for',5,'p_params_for','PythonPlag.py',187),
  ('bool -> TRUE','bool',1,'p_bool','PythonPlag.py',191),
  ('bool -> FALSE','bool',1,'p_bool','PythonPlag.py',192),
  ('and_or -> AND','and_or',1,'p_and_or','PythonPlag.py',196),
  ('and_or -> OR','and_or',1,'p_and_or','PythonPlag.py',197),
]
